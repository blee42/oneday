{
  "name": "passport-linkedin-oauth2",
  "version": "1.1.1",
  "description": "Passport for LinkedIn Oauth2",
  "main": "./lib",
  "repository": {
    "type": "git",
    "url": "https://github.com/auth0/passport-linkedin-oauth2"
  },
  "scripts": {
    "test": "mocha --require should -t 5000"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "~1.2.1",
    "passport": "~0.1.17",
    "express": "~3.4.4",
    "ejs": "~0.8.4"
  },
  "keywords": [
    "passport",
    "linkedin",
    "auth0"
  ],
  "author": {
    "name": "Auth0"
  },
  "contributors": [
    {
      "name": "Eugenio Pace",
      "email": "eugenio.pace@qraftlabs.com"
    },
    {
      "name": "Joshua Schell",
      "email": "jschell12@gmail.com"
    },
    {
      "name": "Jose Romaniello",
      "email": "jfromaniello@gmail.com"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "passport-oauth": "~0.1.14",
    "underscore": "~1.5.2"
  },
  "readme": "A simple [Passport](http://passportjs.org/) strategy for LinkedIn OAuth2.\n\n## Install\n\n\tnpm install passport-linkedin-oauth2\n\n## Usage\n\nRegister the strategy\n\n~~~javascript\nvar LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;\n\npassport.use(new LinkedInStrategy({\n    \t  clientID: LINKEDIN_KEY,\n    \t  clientSecret: LINKEDIN_SECRET,\n    \t  callbackURL: \"http://127.0.0.1:3000/auth/linkedin/callback\"\n    \t  scope: ['r_emailaddress', 'r_basicprofile'],\n  \t\t}, function(accessToken, refreshToken, profile, done) {\n\t    \t// asynchronous verification, for effect...\n\t\t    process.nextTick(function () {\n\t\t      // To keep the example simple, the user's Google profile is returned to\n\t\t      // represent the logged-in user.  In a typical application, you would want\n\t\t      // to associate the Google account with a user record in your database,\n\t\t      // and return that user instead.\n\t\t      return done(null, profile);\n\t\t    });\n\t  \t\t}\n\t\t));\n~~~\n\nand then authenticate as:\n\n~~~javascript\napp.get('/auth/linkedin',\n                passport.authenticate('linkedin', { state: 'SOME STATE'  }),\n\t\t  function(req, res){\n\t\t    // The request will be redirected to LinkedIn for authentication, so this\n\t\t    // function will not be called.\n\t\t  });\n\n~~~\n\nthe login callback:\n\n~~~javascript\napp.get('/auth/linkedin/callback', passport.authenticate('linkedin', {\n   successRedirect: '/',\n   failureRedirect: '/login'\n}));\n~~~\n\nSee [this](http://developer.linkedin.com/) for details on LinkedIn API.\n\n## License\n\nMIT - 2013 - AUTH0\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/auth0/passport-linkedin-oauth2/issues"
  },
  "homepage": "https://github.com/auth0/passport-linkedin-oauth2",
  "_id": "passport-linkedin-oauth2@1.1.1",
  "dist": {
    "shasum": "dc6591947e161ef055c58b7bd16c6a2c4294b37a"
  },
  "_from": "passport-linkedin-oauth2@~1.1.1",
  "_resolved": "https://registry.npmjs.org/passport-linkedin-oauth2/-/passport-linkedin-oauth2-1.1.1.tgz"
}
